<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         version="2.5">
  <!-- The front controller of this Spring Web application, responsible for handling all application requests -->
  <servlet>
    <servlet-name>springDispatcherServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-web-mvc.xml,classpath:spring-persist-*.xml</param-value>
    </init-param>
    <!--memo:Servlet默认生命周期中，创建对象是在第一次接受到请求时-->
    <!--而DispatcherServlet创建对象后又大量的“框架初始化”工作，不适合在第一次请求时来做-->
    <!--设置load-on-startup就是为了当DispatcherServlet在Web应用启动时创建对象、初始化-->
    <!--数字越小，越靠前执行-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- Map all requests to the DispatcherServlet for handling -->
  <servlet-mapping>
    <servlet-name>springDispatcherServlet</servlet-name>
    <!--url-pattern配置方式一：/表示拦截所有请求-->
    <!--<url-pattern>/</url-pattern>-->

    <!--memo:url-pattern配置方式二：配置请求扩展名-->
    <!--优点1：xxx.css,xx.js,xxx.png等等静态资源完全不经过SpringMVC,不需要特殊处理-->
    <!--优点2：可以实现伪静态效果，表面上看起来是访问一个HTML文件这样的静态资源，但是实际上是经过Java代码运算的结果-->
    <!--伪静态作用：给黑客入侵增加难度
    伪静态作用：有利于SEO优化（让百度、谷歌这样的搜索引擎更容易找到我们的项目，但是在百度竞价排名的今天，这样的优化形同虚设）
    缺点：不符合RESTFull风格-->
    <url-pattern>*.html</url-pattern>
    <!--memo:为什么要配置json扩展名呢？
    如果一个Ajax请求扩展名是html，但是实际服务器给浏览器返回的是json数据，二者就不匹配了，会出现406错误
    为了让Ajax请求能够顺利拿到JSON格式的响应数据，我们另外配置json扩展名-->
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>CharacterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <!--memo:强制请求设置字符集-->
      <param-name>forceRequestEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <!--memo:强制响应设置字符集-->
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--memo:这个Filter执行顺序要在所有Filter前面-->
  <!--原因如下：-->
  <!--request.setCharacterEncoding(encoding)必须在request.getParameter()前面-->
  <!--response.setCharacterEncoding(encoding)必须在response.getWriter()前面-->
  <filter-mapping>
    <filter-name>CharacterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- SpringSecurity的Filter -->
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
</web-app>
